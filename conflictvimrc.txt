" ---------------------- PLUGIN CONFIGURATION ----------------------

set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" start plugin defintion
Plugin 'mattn/emmet-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'flazz/vim-colorschemes'
Plugin 'jiangmiao/auto-pairs'
Plugin 'vim-scripts/HTML-AutoCloseTag'
" markdown editor plugin defintion
Plugin 'reedes/vim-pencil'
Plugin 'reedes/vim-colors-pencil'
Plugin 'junegunn/limelight.vim'
Plugin 'junegunn/goyo.vim'

" All Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" ---------------------- BASICS ----------------------

" turn on syntax highlighting
syntax on

" and show line numbers
set number

" reload files changed outside vim
set autoread

" encoding is utf 8
set encoding=utf-8
set fileencoding=utf-8

" set unix line endings
set fileformat=unix

" when reading files try unix line endings then dos, also use unix for new
" buffers
set fileformats=unix,dos

" remove the temp files
set nobackup
set nowritebackup
set noswapfile

" ---------------------- EDITING ----------------------

" indentation
set expandtab       " use spaces instead of tabs
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages
set shiftwidth=4    " when reading, tabs are 4 spaces
set softtabstop=4   " in insert mode, tabs are 4 spaces

" show the cursor position all the time
set ruler
set cursorline

" HTML Editing
set matchpairs+=<:>

" Use tabs for Emmet
let g:user_emmet_leader_key='<Tab>'

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" no lines longer than 100 cols
set textwidth=100
set formatoptions=qrn1
set wrapmargin=0
set colorcolumn=+1

" -------------------- APPEARANCE ---------------------

" set Airline
set laststatus=2

" set theme
set background=dark
colorscheme Tomorrow-Night

" set default font in mac vim and gvim
" remember to download the font from Powerline
set guifont=Inconsolata\ for\ Powerline:h16

" Allow powerline symbols to show up
let g:airline_powerline_fonts = 1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" ---------------------- SEARCH ----------------------

" no need to type /g at the end of search / replace
set gdefault

" case insensitive searching (unless specified)
set ignorecase
set smartcase

" hilight searches by default
set hlsearch

" Stop highlight after searching
nnoremap <silent> <leader>, :noh<cr>

" find the next match as we type the search
set incsearch

" highlight matching brackets
set showmatch

" -------------------- EXTENSIONS --------------------

" allows to put a custom .vim file in every directory
" to load commands and options specific to that directory.
let b:thisdir=expand("%:p:h")
let b:vim=b:thisdir."/.vim"
if (filereadable(b:vim))
    execute "source ".b:vim
endif

" extends more settings to .vimrc.custom if available
if filereadable(expand("~/.vimrc.custom"))
    source ~/.vimrc.custom
endif

" ------------------ WRITE SETTINGS ------------------

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,md call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END

" sets different color schemes for markdown
autocmd BufEnter * set background=dark
autocmd VimEnter * colorscheme Tomorrow-Night
autocmd BufEnter * let g:airline_theme='dark'
autocmd BufEnter *.md set background=light
autocmd VimEnter *.md colorscheme pencil

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  Limelight
  " ...
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  Limelight!
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
